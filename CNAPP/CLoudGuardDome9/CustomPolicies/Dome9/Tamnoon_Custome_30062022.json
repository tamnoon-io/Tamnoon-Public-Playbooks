[
  {
    "name": "ALB potentially exposed to the public internet",
    "description": "Services and databases store data that may be sensitive, protected by law, subject to regulatory requirements or compliance standards. It is highly recommended that access to data will be restricted. This rule detects network settings that may expose data over the public internet",
    "severity": "Critical",
    "logic": "ApplicationLoadBalancer where isPublic=true and nics contain [ subnet.routeTable.associations length()>0 ] and nics contain [ subnet.routeTable.routes contain [ destinationCidrBlock='0.0.0.0/0' and gatewayId regexMatch /gw/ ] ] should not have ( ( inboundRules with [scope = '0.0.0.0/0' and ( port = 20 or (port<=20 and portTo>=20))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 20 or (destinationPort<=20 and destinationPortTo >=20)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 21 or (port<=21 and portTo>=21))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 21 or (destinationPort<=21 and destinationPortTo >=21)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 22 or (port<=22 and portTo>=22))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 22 or (destinationPort<=22 and destinationPortTo >=22)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 23 or (port<=23 and portTo>=23))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 23 or (destinationPort<=23 and destinationPortTo >=23)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 115 or (port<=115 and portTo>=115))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 115 or (destinationPort<=115 and destinationPortTo >=115)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 137 or (port<=137 and portTo>=137))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 137 or (destinationPort<=137 and destinationPortTo >=137)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 138 or (port<=138 and portTo>=138))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 138 or (destinationPort<=138 and destinationPortTo >=138)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 139 or (port<=139 and portTo>=139))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 139 or (destinationPort<=139 and destinationPortTo >=139)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 389 or (port<=389 and portTo>=389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 389 or (destinationPort<=389 and destinationPortTo >=389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2049 or (port<=2049 and portTo>=2049))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2049 or (destinationPort<=2049 and destinationPortTo >=2049)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9042 or (port<=9042 and portTo>=9042))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9042 or (destinationPort<=9042 and destinationPortTo >=9042)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 61620 or (port<=61620 and portTo>=61620))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 61620 or (destinationPort<=61620 and destinationPortTo >=61620)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 8888 or (port<=8888 and portTo>=8888))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 8888 or (destinationPort<=8888 and destinationPortTo >=8888)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9160 or (port<=9160 and portTo>=9160))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9160 or (destinationPort<=9160 and destinationPortTo >=9160)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9200 or (port<=9200 and portTo>=9200))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9200 or (destinationPort<=9200 and destinationPortTo >=9200)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9300 or (port<=9300 and portTo>=9300))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9300 or (destinationPort<=9300 and destinationPortTo >=9300)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 1521 or (port<=1521 and portTo>=1521))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 1521 or (destinationPort<=1521 and destinationPortTo >=1521)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2483 or (port<=2483 and portTo>=2483))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2483 or (destinationPort<=2483 and destinationPortTo >=2483)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 6379 or (port<=6379 and portTo>=6379))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 6379 or (destinationPort<=6379 and destinationPortTo >=6379)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 3389 or (port<=3389 and portTo>=3389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 3389 or (destinationPort<=3389 and destinationPortTo >=3389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 11211 or (port<=11211 and portTo>=11211))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 11211 or (destinationPort<=11211 and destinationPortTo >=11211)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 27017 or (port<=27017 and portTo>=27017))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 27017 or (destinationPort<=27017 and destinationPortTo >=27017)]]]) ) ) and isRunning=true",
    "remediation": "It is recommended to remove network rules that allow permissive SSH/Remote/Admin access.\n If public interface exists, remove it and limit the access scope within the VPC only to applications or instances that requires access.\n Amazon Reference: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html",
    "complianceTag": "TM.AWS.NET.03|Network Security",
    "logicHash": "mia4yNjvD0Fu7KGQ7VXYhQ",
    "ruleId": "TM.AWS.NET.03",
    "category": ""
  },
  {
    "name": "ELB potentially exposed to the public internet",
    "description": "Services and databases store data that may be sensitive, protected by law, subject to regulatory requirements or compliance standards. It is highly recommended that access to data will be restricted. This rule detects network settings that may expose data over the public internet",
    "severity": "Critical",
    "logic": "ELB where isPublic=true and nics contain [ subnet.routeTable.associations length()>0 ] and nics contain [ subnet.routeTable.routes contain [ destinationCidrBlock='0.0.0.0/0' and gatewayId regexMatch /gw/ ] ] should not have ( ( inboundRules with [scope = '0.0.0.0/0' and ( port = 20 or (port<=20 and portTo>=20))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 20 or (destinationPort<=20 and destinationPortTo >=20)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 21 or (port<=21 and portTo>=21))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 21 or (destinationPort<=21 and destinationPortTo >=21)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 22 or (port<=22 and portTo>=22))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 22 or (destinationPort<=22 and destinationPortTo >=22)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 23 or (port<=23 and portTo>=23))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 23 or (destinationPort<=23 and destinationPortTo >=23)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 115 or (port<=115 and portTo>=115))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 115 or (destinationPort<=115 and destinationPortTo >=115)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 137 or (port<=137 and portTo>=137))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 137 or (destinationPort<=137 and destinationPortTo >=137)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 138 or (port<=138 and portTo>=138))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 138 or (destinationPort<=138 and destinationPortTo >=138)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 139 or (port<=139 and portTo>=139))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 139 or (destinationPort<=139 and destinationPortTo >=139)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 389 or (port<=389 and portTo>=389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 389 or (destinationPort<=389 and destinationPortTo >=389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2049 or (port<=2049 and portTo>=2049))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2049 or (destinationPort<=2049 and destinationPortTo >=2049)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9042 or (port<=9042 and portTo>=9042))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9042 or (destinationPort<=9042 and destinationPortTo >=9042)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 61620 or (port<=61620 and portTo>=61620))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 61620 or (destinationPort<=61620 and destinationPortTo >=61620)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 8888 or (port<=8888 and portTo>=8888))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 8888 or (destinationPort<=8888 and destinationPortTo >=8888)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9160 or (port<=9160 and portTo>=9160))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9160 or (destinationPort<=9160 and destinationPortTo >=9160)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9200 or (port<=9200 and portTo>=9200))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9200 or (destinationPort<=9200 and destinationPortTo >=9200)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9300 or (port<=9300 and portTo>=9300))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9300 or (destinationPort<=9300 and destinationPortTo >=9300)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 1521 or (port<=1521 and portTo>=1521))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 1521 or (destinationPort<=1521 and destinationPortTo >=1521)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2483 or (port<=2483 and portTo>=2483))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2483 or (destinationPort<=2483 and destinationPortTo >=2483)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 6379 or (port<=6379 and portTo>=6379))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 6379 or (destinationPort<=6379 and destinationPortTo >=6379)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 3389 or (port<=3389 and portTo>=3389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 3389 or (destinationPort<=3389 and destinationPortTo >=3389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 11211 or (port<=11211 and portTo>=11211))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 11211 or (destinationPort<=11211 and destinationPortTo >=11211)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 27017 or (port<=27017 and portTo>=27017))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 27017 or (destinationPort<=27017 and destinationPortTo >=27017)]]]) ) ) and isRunning=true",
    "remediation": "It is recommended to remove network rules that allow permissive SSH/Remote/Admin access.\n If public interface exists, remove it and limit the access scope within the VPC only to applications or instances that requires access.\n Amazon Reference: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html\"",
    "complianceTag": "TM.AWS.NET.04|Network Security",
    "logicHash": "vTqLJSp3Bgbezv7yFWGVtA",
    "ruleId": "TM.AWS.NET.04",
    "category": ""
  },
  {
    "name": "Instances potentially exposed to the public internet",
    "description": "Services and databases store data that may be sensitive, protected by law, subject to regulatory requirements or compliance standards. It is highly recommended that access to data will be restricted. This rule detects network settings that may expose data over the public internet",
    "severity": "Critical",
    "logic": "\nInstance where isPublic=true and nics contain [ subnet.routeTable.associations length()>0 ] and nics contain [ subnet.routeTable.routes contain [ destinationCidrBlock='0.0.0.0/0' and gatewayId regexMatch /gw/ ] ] should not have (( ( inboundRules with [scope = '0.0.0.0/0' and ( port = 20 or (port<=20 and portTo>=20))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 20 or (destinationPort<=20 and destinationPortTo >=20)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 21 or (port<=21 and portTo>=21))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 21 or (destinationPort<=21 and destinationPortTo >=21)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 22 or (port<=22 and portTo>=22))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 22 or (destinationPort<=22 and destinationPortTo >=22)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 23 or (port<=23 and portTo>=23))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 23 or (destinationPort<=23 and destinationPortTo >=23)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 115 or (port<=115 and portTo>=115))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 115 or (destinationPort<=115 and destinationPortTo >=115)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 137 or (port<=137 and portTo>=137))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 137 or (destinationPort<=137 and destinationPortTo >=137)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 138 or (port<=138 and portTo>=138))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 138 or (destinationPort<=138 and destinationPortTo >=138)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 139 or (port<=139 and portTo>=139))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 139 or (destinationPort<=139 and destinationPortTo >=139)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 389 or (port<=389 and portTo>=389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 389 or (destinationPort<=389 and destinationPortTo >=389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2049 or (port<=2049 and portTo>=2049))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2049 or (destinationPort<=2049 and destinationPortTo >=2049)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9042 or (port<=9042 and portTo>=9042))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9042 or (destinationPort<=9042 and destinationPortTo >=9042)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 61620 or (port<=61620 and portTo>=61620))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 61620 or (destinationPort<=61620 and destinationPortTo >=61620)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 8888 or (port<=8888 and portTo>=8888))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 8888 or (destinationPort<=8888 and destinationPortTo >=8888)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9160 or (port<=9160 and portTo>=9160))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9160 or (destinationPort<=9160 and destinationPortTo >=9160)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9200 or (port<=9200 and portTo>=9200))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9200 or (destinationPort<=9200 and destinationPortTo >=9200)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9300 or (port<=9300 and portTo>=9300))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9300 or (destinationPort<=9300 and destinationPortTo >=9300)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 1521 or (port<=1521 and portTo>=1521))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 1521 or (destinationPort<=1521 and destinationPortTo >=1521)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2483 or (port<=2483 and portTo>=2483))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2483 or (destinationPort<=2483 and destinationPortTo >=2483)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 6379 or (port<=6379 and portTo>=6379))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 6379 or (destinationPort<=6379 and destinationPortTo >=6379)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 3389 or (port<=3389 and portTo>=3389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 3389 or (destinationPort<=3389 and destinationPortTo >=3389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 11211 or (port<=11211 and portTo>=11211))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 11211 or (destinationPort<=11211 and destinationPortTo >=11211)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 27017 or (port<=27017 and portTo>=27017))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 27017 or (destinationPort<=27017 and destinationPortTo >=27017)]]]) ) )) and isRunning=true",
    "remediation": "It is recommended to remove network rules that allow permissive SSH/Remote/Admin access.\n If public interface exists, remove it and limit the access scope within the VPC only to applications or instances that requires access.\n Amazon Reference: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html",
    "complianceTag": "TM.AWS.NET.01|Network Exposure",
    "logicHash": "dN+BRE8twZ2MY1tBHzrWPA",
    "ruleId": "TM.AWS.NET.01",
    "category": ""
  },
  {
    "name": "Publicly Exposed S3 Bucket",
    "description": "Misconfigured S3 buckets can leak private information to the entire internet or allow unauthorized data tampering / deletion. S3 bucket policy should ensure that principal of least privilege is being followed. A condition statement can be used to control the scope of the policy.",
    "severity": "Critical",
    "logic": "S3Bucket should not have ((accessPublicBlock isEmpty() = true and accountAccessPublicBlock isEmpty() and ( acl.grants contain [uri like 'http://acs.amazonaws.com/groups/global/%'] or policy.Statement with [Effect='Allow' and (Principal='*' or Principal.AWS='*') ])) or (accessPublicBlock.ignorePublicAcls = false and acl.grants contain [uri like 'http://acs.amazonaws.com/groups/global/%']) or (accessPublicBlock.restrictPublicBuckets = false and policy.Statement with [Effect='Allow' and (Principal='*' or Principal.AWS='*') and Condition isEmpty() ]))",
    "remediation": "**From Portal:**\n 1. Sign in to the AWS Management Console and open the Amazon S3 console at https://console.aws.amazon.com/s3/.\n 2. In the Buckets list, choose the name of the bucket that you want to create a bucket policy for or whose bucket policy you want to edit.\n 3. Choose Permissions.\n 4. Under Bucket policy, choose Edit. This opens the Edit bucket policy page.\n 5. On the Edit bucket policy page, explore Policy examples in the Amazon S3 User Guide, choose Policy generator to generate a policy automatically, or edit the JSON in the Policy section.\n Here verify policies for s3:Get* actions for principals '*'. If necessary, modify the policy instead, to limit the access to specific principals.\n 6. In the Policy box, edit the existing policy or paste the bucket policy from the Policy generator. Make sure to resolve security warnings, errors, general warnings, and suggestions before you save your policy.\n 7. Choose Save changes, which returns you to the Bucket Permissions page",
    "complianceTag": "TM.AWS.CRY.04|Network Security",
    "logicHash": "e9neJtoZl/rCZUGG1/trFg",
    "ruleId": "TM.AWS.CRY.04",
    "category": ""
  },
  {
    "name": "RDS potentially exposed to the public internet",
    "description": "Publicly exposed RDS instances can leak private information to the entire internet or allow unauthorized data exfiltration / deletion.",
    "severity": "Critical",
    "logic": "RDS where isPublic=true and nics contain [ subnet.routeTable.associations length()>0 ] and nics contain [ subnet.routeTable.routes contain [ destinationCidrBlock='0.0.0.0/0' and gatewayId regexMatch /gw/ ] ] should not have ( ( inboundRules with [scope = '0.0.0.0/0' and ( port = 20 or (port<=20 and portTo>=20))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 20 or (destinationPort<=20 and destinationPortTo >=20)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 21 or (port<=21 and portTo>=21))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 21 or (destinationPort<=21 and destinationPortTo >=21)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 22 or (port<=22 and portTo>=22))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 22 or (destinationPort<=22 and destinationPortTo >=22)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 23 or (port<=23 and portTo>=23))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 23 or (destinationPort<=23 and destinationPortTo >=23)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 115 or (port<=115 and portTo>=115))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 115 or (destinationPort<=115 and destinationPortTo >=115)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 137 or (port<=137 and portTo>=137))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 137 or (destinationPort<=137 and destinationPortTo >=137)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 138 or (port<=138 and portTo>=138))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 138 or (destinationPort<=138 and destinationPortTo >=138)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 139 or (port<=139 and portTo>=139))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 139 or (destinationPort<=139 and destinationPortTo >=139)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 389 or (port<=389 and portTo>=389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 389 or (destinationPort<=389 and destinationPortTo >=389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2049 or (port<=2049 and portTo>=2049))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2049 or (destinationPort<=2049 and destinationPortTo >=2049)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9042 or (port<=9042 and portTo>=9042))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9042 or (destinationPort<=9042 and destinationPortTo >=9042)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 61620 or (port<=61620 and portTo>=61620))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 61620 or (destinationPort<=61620 and destinationPortTo >=61620)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 8888 or (port<=8888 and portTo>=8888))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 8888 or (destinationPort<=8888 and destinationPortTo >=8888)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9160 or (port<=9160 and portTo>=9160))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9160 or (destinationPort<=9160 and destinationPortTo >=9160)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9200 or (port<=9200 and portTo>=9200))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9200 or (destinationPort<=9200 and destinationPortTo >=9200)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9300 or (port<=9300 and portTo>=9300))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9300 or (destinationPort<=9300 and destinationPortTo >=9300)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 1521 or (port<=1521 and portTo>=1521))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 1521 or (destinationPort<=1521 and destinationPortTo >=1521)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2483 or (port<=2483 and portTo>=2483))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2483 or (destinationPort<=2483 and destinationPortTo >=2483)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 6379 or (port<=6379 and portTo>=6379))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 6379 or (destinationPort<=6379 and destinationPortTo >=6379)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 3389 or (port<=3389 and portTo>=3389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 3389 or (destinationPort<=3389 and destinationPortTo >=3389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 11211 or (port<=11211 and portTo>=11211))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 11211 or (destinationPort<=11211 and destinationPortTo >=11211)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 27017 or (port<=27017 and portTo>=27017))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 27017 or (destinationPort<=27017 and destinationPortTo >=27017)]]]) ) ) and isRunning=true",
    "remediation": "Remove the public interface as well as limit the scope to the VPC; follow AWS guidelines at: http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.html",
    "complianceTag": "TM.AWS.NET.10|Network Security",
    "logicHash": "pvsm0aPjAEGxe2oJYAPuMw",
    "ruleId": "TM.AWS.NET.10",
    "category": ""
  },
  {
    "name": "Admin roles unused more than 90 days",
    "description": "Ensure that the role is necessary and follows the least privilege principle, otherwise consider deleting the role.",
    "severity": "High",
    "logic": "IamRole where roleLastUsed.lastUsedDate before(-90,'days') should not have combinedPolicies contain-any [ policyDocument.Statement contain-any [ Resource = '*' and Action='*' and Effect='Allow'] ]",
    "remediation": "This IAM Role can be assumed and consumed from ADFS federation using SSO and also from any Cloud Asset within the Account Tamnoon Recommend to: 1. Navigate to the IAM Role screen and double click on the FASTApplication-Admin and MASTER-Admin Roles. 2. Remove the Managed Policy - AdministratorAccess This will eliminate any admin activity fro now on using that role For reference use the next blog about unused IAM Roles https://aws.amazon.com/blogs/security/identify-unused-iam-roles-remove-confidently-last-used-timestamp/",
    "complianceTag": "TM.AWS.IAM.03|Identity and Access Management",
    "logicHash": "mLFCPhK0ogsAQlR0l78csw",
    "ruleId": "TM.AWS.IAM.03",
    "category": ""
  },
  {
    "name": "EksCluster should not be publicly accessible",
    "description": "Allowing your EksCluster Public access leave you asset expose for attacks",
    "severity": "High",
    "logic": "EksCluster where resourcesVpcConfig.endpointPublicAccess=true or resourcesVpcConfig.endpointPrivateAccess=false should not have resourcesVpcConfig.publicAccessCidrs isEmpty() or resourcesVpcConfig.publicAccessCidrs contain ['0.0.0.0/0']",
    "remediation": "Add CIDR that enforce access from specifc range. For more information https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html",
    "complianceTag": "TM.AWS.NET.71|Network Security",
    "logicHash": "50A/2xiGz2S7v2+ryqRUBA",
    "ruleId": "TM.AWS.NET.71",
    "category": ""
  },
  {
    "name": "Ensure EBS volume encryption is enabled",
    "description": "With Amazon EBS encryption, you aren't required to build, maintain, and secure your own key management infrastructure. Also it ensures that the data is encrypted and rest and during transit from EBS to EC2.",
    "severity": "High",
    "logic": "Volume should have encrypted=true",
    "remediation": "**From Portal:**\n 1. Login to AWS Management Console and open the Amazon EC2 console using https://console.aws.amazon.com/ec2/\n 2. Under `Account attributes`, click `EBS encryption`.\n 3. Click `Manage`.\n 4. Click the `Enable` checkbox.\n 5. Click `Update EBS encryption`\n 6. Repeat for every region requiring the change.\n \n Note: EBS volume encryption is configured per region.\n \n **From TF:**\n Set encrypted to true in the terraform file:\n ```\n resource \"aws_ebs_volume\" \"example_volume\" {\n ...\n encrypted = true\n ...\n \n }\n ```\n \n **From Command Line:**\n 1. Run\n ```\n aws --region REGION ec2 enable-ebs-encryption-by-default\n ```\n 2. Verify that `\"EbsEncryptionByDefault\": true` is displayed.\n 3. Repeat every region requiring the change.\n \n Note: EBS volume encryption is configured per region.\n \n References:\n 1. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\n 2. https://aws.amazon.com/blogs/aws/new-opt-in-to-default-encryption-for-new-ebs-volumes/\n 3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted",
    "complianceTag": "2.2.1 | Encryption and Key Management",
    "logicHash": "WOGlCrEXBOGzQErmokpK9Q",
    "ruleId": "D9.AWS.CRY.61",
    "category": ""
  },
  {
    "name": "Ensure that all the unused default security groups of every VPC restricts all traffic",
    "description": "A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic. The default VPC in every region should have its default security group updated to comply. Any newly created VPCs will automatically contain a default security group that will need remediation to comply with this recommendation.\\nNOTE: When implementing this recommendation, VPC flow logging is invaluable in determining the least privilege port access required by systems to work properly because it can log all packet acceptances and rejections occurring under the current security groups. This dramatically reduces the primary barrier to least privilege engineering - discovering the minimum ports required by systems in the environment. Even if the VPC flow logging recommendation in this benchmark is not adopted as a permanent security measure, it should be used during any period of discovery and engineering for least privileged security groups.",
    "severity": "High",
    "logic": "SecurityGroup where name like 'default' and networkAssetsStats contain-all [ count = 0 ] and networkInterfaces isEmpty()  should have inboundRules isEmpty() and outboundRules isEmpty()",
    "remediation": "Security Group Members\\nPerform the following to implement the prescribed state:\n1. Identify AWS resources that exist within the default security group\n2. Create a set of least privilege security groups for those resources\n3. Place the resources in those security groups\n4. Remove the resources noted in #1 from the default security group\n\nSecurity Group State\n1. Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home\n2. Repeat the next steps for all VPCs - including the default VPC in each AWS region:\n3. In the left pane, click Security Groups\n4. For each default security group, perform the following:\\\n5. Select the default security group\n6. Click the Inbound Rules tab\n7. Remove any inbound rules\n8. Click the Outbound Rules tab\n9. Remove any inbound rules\n\nRecommended: IAM groups allow you to edit the 'name' field. After remediating default groups rules for all VPCs in all regions, edit this field to add text similar to 'DO NOT USE. DO NOT ADD RULES'",
    "complianceTag": "TM.AWS.NET.11|Network Security|SEC 5",
    "logicHash": "UPq5NCfeOd45c3hvP3aMsA",
    "ruleId": "TM.AWS.NET.11",
    "category": ""
  },
  {
    "name": "Instance with high severity AWS Inspector Vulnerabilities",
    "description": "Are there are instances with high severity inspector findings. Inspector is an AWS service that helps improve the security and compliance of your AWS resources. Inspector Findings are potential security issues found during the evaluation of selected resources.",
    "severity": "High",
    "logic": "Instance should not have scanners.findings contain-any [ ruleSeverity='High' and not(ruleId regexMatch /port/)]",
    "remediation": "Check for AWS Inspector Findings and resolve them on a timely basis to ensure that your systems are up to date with the latest patches and are configured securely.",
    "complianceTag": "TM.AWS.NET.06|Vulnerability Management",
    "logicHash": "7izF5Xw+sQE/zBgQOESUvg",
    "ruleId": "TM.AWS.NET.06",
    "category": ""
  },
  {
    "name": "Internally exposed ALB",
    "description": "Services and databases store data that may be sensitive, protected by law, subject to regulatory requirements or compliance standards. It is highly recommended that access to data will be restricted. This rule detects network settings that may expose data over the public internet or to a too wide local scope.",
    "severity": "High",
    "logic": "ApplicationLoadBalancer where isPublic=false or not(nics contain [ subnet.routeTable.associations length()>0 ]) or not(nics contain [ subnet.routeTable.routes contain [ destinationCidrBlock='0.0.0.0/0' and gatewayId regexMatch /gw/ ]]) should not have ( ( inboundRules with [scope = '0.0.0.0/0' and ( port = 20 or (port<=20 and portTo>=20))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 20 or (destinationPort<=20 and destinationPortTo >=20)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 21 or (port<=21 and portTo>=21))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 21 or (destinationPort<=21 and destinationPortTo >=21)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 22 or (port<=22 and portTo>=22))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 22 or (destinationPort<=22 and destinationPortTo >=22)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 23 or (port<=23 and portTo>=23))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 23 or (destinationPort<=23 and destinationPortTo >=23)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 115 or (port<=115 and portTo>=115))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 115 or (destinationPort<=115 and destinationPortTo >=115)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 137 or (port<=137 and portTo>=137))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 137 or (destinationPort<=137 and destinationPortTo >=137)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 138 or (port<=138 and portTo>=138))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 138 or (destinationPort<=138 and destinationPortTo >=138)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 139 or (port<=139 and portTo>=139))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 139 or (destinationPort<=139 and destinationPortTo >=139)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 389 or (port<=389 and portTo>=389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 389 or (destinationPort<=389 and destinationPortTo >=389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2049 or (port<=2049 and portTo>=2049))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2049 or (destinationPort<=2049 and destinationPortTo >=2049)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9042 or (port<=9042 and portTo>=9042))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9042 or (destinationPort<=9042 and destinationPortTo >=9042)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 61620 or (port<=61620 and portTo>=61620))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 61620 or (destinationPort<=61620 and destinationPortTo >=61620)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 8888 or (port<=8888 and portTo>=8888))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 8888 or (destinationPort<=8888 and destinationPortTo >=8888)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9160 or (port<=9160 and portTo>=9160))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9160 or (destinationPort<=9160 and destinationPortTo >=9160)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9200 or (port<=9200 and portTo>=9200))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9200 or (destinationPort<=9200 and destinationPortTo >=9200)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9300 or (port<=9300 and portTo>=9300))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9300 or (destinationPort<=9300 and destinationPortTo >=9300)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 1521 or (port<=1521 and portTo>=1521))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 1521 or (destinationPort<=1521 and destinationPortTo >=1521)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2483 or (port<=2483 and portTo>=2483))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2483 or (destinationPort<=2483 and destinationPortTo >=2483)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 6379 or (port<=6379 and portTo>=6379))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 6379 or (destinationPort<=6379 and destinationPortTo >=6379)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 3389 or (port<=3389 and portTo>=3389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 3389 or (destinationPort<=3389 and destinationPortTo >=3389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 11211 or (port<=11211 and portTo>=11211))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 11211 or (destinationPort<=11211 and destinationPortTo >=11211)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 27017 or (port<=27017 and portTo>=27017))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 27017 or (destinationPort<=27017 and destinationPortTo >=27017)]]]) ) ) and isRunning=true",
    "remediation": "It is recommended to remove network rules that allow permissive SSH/Remote/Admin access.\n If public interface exists, remove it and limit the access scope within the VPC only to applications or instances that requires access.",
    "complianceTag": "TM.AWS.NET.08|Network Security",
    "logicHash": "hVdzX0nqeiZn6uwHZ5dJug",
    "ruleId": "TM.AWS.NET.08",
    "category": ""
  },
  {
    "name": "Internally exposed ELB",
    "description": "Services and databases store data that may be sensitive, protected by law, subject to regulatory requirements or compliance standards. It is highly recommended that access to data will be restricted. This rule detects network settings that may expose data over the public internet",
    "severity": "High",
    "logic": "ELB where isPublic=false or not(nics contain [ subnet.routeTable.associations length()>0 ]) or not(nics contain [ subnet.routeTable.routes contain [ destinationCidrBlock='0.0.0.0/0' and gatewayId regexMatch /gw/ ]]) should not have ( ( inboundRules with [scope = '0.0.0.0/0' and ( port = 20 or (port<=20 and portTo>=20))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 20 or (destinationPort<=20 and destinationPortTo >=20)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 21 or (port<=21 and portTo>=21))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 21 or (destinationPort<=21 and destinationPortTo >=21)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 22 or (port<=22 and portTo>=22))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 22 or (destinationPort<=22 and destinationPortTo >=22)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 23 or (port<=23 and portTo>=23))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 23 or (destinationPort<=23 and destinationPortTo >=23)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 115 or (port<=115 and portTo>=115))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 115 or (destinationPort<=115 and destinationPortTo >=115)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 137 or (port<=137 and portTo>=137))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 137 or (destinationPort<=137 and destinationPortTo >=137)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 138 or (port<=138 and portTo>=138))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 138 or (destinationPort<=138 and destinationPortTo >=138)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 139 or (port<=139 and portTo>=139))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 139 or (destinationPort<=139 and destinationPortTo >=139)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 389 or (port<=389 and portTo>=389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 389 or (destinationPort<=389 and destinationPortTo >=389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2049 or (port<=2049 and portTo>=2049))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2049 or (destinationPort<=2049 and destinationPortTo >=2049)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9042 or (port<=9042 and portTo>=9042))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9042 or (destinationPort<=9042 and destinationPortTo >=9042)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 61620 or (port<=61620 and portTo>=61620))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 61620 or (destinationPort<=61620 and destinationPortTo >=61620)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 8888 or (port<=8888 and portTo>=8888))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 8888 or (destinationPort<=8888 and destinationPortTo >=8888)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9160 or (port<=9160 and portTo>=9160))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9160 or (destinationPort<=9160 and destinationPortTo >=9160)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9200 or (port<=9200 and portTo>=9200))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9200 or (destinationPort<=9200 and destinationPortTo >=9200)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9300 or (port<=9300 and portTo>=9300))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9300 or (destinationPort<=9300 and destinationPortTo >=9300)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 1521 or (port<=1521 and portTo>=1521))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 1521 or (destinationPort<=1521 and destinationPortTo >=1521)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2483 or (port<=2483 and portTo>=2483))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2483 or (destinationPort<=2483 and destinationPortTo >=2483)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 6379 or (port<=6379 and portTo>=6379))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 6379 or (destinationPort<=6379 and destinationPortTo >=6379)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 3389 or (port<=3389 and portTo>=3389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 3389 or (destinationPort<=3389 and destinationPortTo >=3389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 11211 or (port<=11211 and portTo>=11211))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 11211 or (destinationPort<=11211 and destinationPortTo >=11211)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 27017 or (port<=27017 and portTo>=27017))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 27017 or (destinationPort<=27017 and destinationPortTo >=27017)]]]) ) ) and isRunning=true",
    "remediation": "It is recommended to remove network rules that allow permissive SSH/Remote/Admin access.\n If public interface exists, remove it and limit the access scope within the VPC only to applications or instances that requires access.",
    "complianceTag": "TM.AWS.NET.09|Network Security",
    "logicHash": "QPmShyDcaw5iCCoT2Qw8mg",
    "ruleId": "TM.AWS.NET.09",
    "category": ""
  },
  {
    "name": "Internally exposed NLB",
    "description": "Services and databases store data that may be sensitive, protected by law, subject to regulatory requirements or compliance standards. It is highly recommended that access to data will be restricted. This rule detects network settings that may expose data over the public internet or to a too wide local scope.",
    "severity": "High",
    "logic": "NetworkLoadBalancer where isPublic=false or not(nics contain [ subnet.routeTable.associations length()>0 ]) or not(nics contain [ subnet.routeTable.routes contain [ destinationCidrBlock='0.0.0.0/0' and gatewayId regexMatch /gw/ ]]) should not have ( ( inboundRules with [scope = '0.0.0.0/0' and ( port = 20 or (port<=20 and portTo>=20))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 20 or (destinationPort<=20 and destinationPortTo >=20)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 21 or (port<=21 and portTo>=21))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 21 or (destinationPort<=21 and destinationPortTo >=21)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 22 or (port<=22 and portTo>=22))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 22 or (destinationPort<=22 and destinationPortTo >=22)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 23 or (port<=23 and portTo>=23))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 23 or (destinationPort<=23 and destinationPortTo >=23)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 115 or (port<=115 and portTo>=115))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 115 or (destinationPort<=115 and destinationPortTo >=115)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 137 or (port<=137 and portTo>=137))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 137 or (destinationPort<=137 and destinationPortTo >=137)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 138 or (port<=138 and portTo>=138))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 138 or (destinationPort<=138 and destinationPortTo >=138)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 139 or (port<=139 and portTo>=139))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 139 or (destinationPort<=139 and destinationPortTo >=139)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 389 or (port<=389 and portTo>=389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 389 or (destinationPort<=389 and destinationPortTo >=389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2049 or (port<=2049 and portTo>=2049))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2049 or (destinationPort<=2049 and destinationPortTo >=2049)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9042 or (port<=9042 and portTo>=9042))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9042 or (destinationPort<=9042 and destinationPortTo >=9042)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 61620 or (port<=61620 and portTo>=61620))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 61620 or (destinationPort<=61620 and destinationPortTo >=61620)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 8888 or (port<=8888 and portTo>=8888))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 8888 or (destinationPort<=8888 and destinationPortTo >=8888)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9160 or (port<=9160 and portTo>=9160))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9160 or (destinationPort<=9160 and destinationPortTo >=9160)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9200 or (port<=9200 and portTo>=9200))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9200 or (destinationPort<=9200 and destinationPortTo >=9200)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9300 or (port<=9300 and portTo>=9300))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9300 or (destinationPort<=9300 and destinationPortTo >=9300)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 1521 or (port<=1521 and portTo>=1521))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 1521 or (destinationPort<=1521 and destinationPortTo >=1521)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2483 or (port<=2483 and portTo>=2483))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2483 or (destinationPort<=2483 and destinationPortTo >=2483)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 6379 or (port<=6379 and portTo>=6379))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 6379 or (destinationPort<=6379 and destinationPortTo >=6379)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 3389 or (port<=3389 and portTo>=3389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 3389 or (destinationPort<=3389 and destinationPortTo >=3389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 11211 or (port<=11211 and portTo>=11211))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 11211 or (destinationPort<=11211 and destinationPortTo >=11211)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 27017 or (port<=27017 and portTo>=27017))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 27017 or (destinationPort<=27017 and destinationPortTo >=27017)]]]) ) ) and isRunning=true",
    "remediation": "It is recommended to remove network rules that allow permissive SSH/Remote/Admin access.\n If public interface exists, remove it and limit the access scope within the VPC only to applications or instances that requires access.",
    "complianceTag": "TM.AWS.NET.07|Network Security",
    "logicHash": "t0aUIoicPG2ejsTOa3qpPQ",
    "ruleId": "TM.AWS.NET.07",
    "category": ""
  },
  {
    "name": "Internally exposed RDS",
    "description": "Services and databases store data that may be sensitive, protected by law, subject to regulatory requirements or compliance standards. It is highly recommended that access to data will be restricted. This rule detects network settings that may expose data over the public internet or to a too wide local scope.",
    "severity": "High",
    "logic": "RDS where isPublic=false or not(nics contain [ subnet.routeTable.associations length()>0 ]) or not(nics contain [ subnet.routeTable.routes contain [ destinationCidrBlock='0.0.0.0/0' and gatewayId regexMatch /gw/ ]]) should not have ( ( inboundRules with [scope = '0.0.0.0/0' and ( port = 20 or (port<=20 and portTo>=20))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 20 or (destinationPort<=20 and destinationPortTo >=20)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 21 or (port<=21 and portTo>=21))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 21 or (destinationPort<=21 and destinationPortTo >=21)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 22 or (port<=22 and portTo>=22))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 22 or (destinationPort<=22 and destinationPortTo >=22)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 23 or (port<=23 and portTo>=23))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 23 or (destinationPort<=23 and destinationPortTo >=23)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 115 or (port<=115 and portTo>=115))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 115 or (destinationPort<=115 and destinationPortTo >=115)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 137 or (port<=137 and portTo>=137))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 137 or (destinationPort<=137 and destinationPortTo >=137)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 138 or (port<=138 and portTo>=138))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 138 or (destinationPort<=138 and destinationPortTo >=138)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 139 or (port<=139 and portTo>=139))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 139 or (destinationPort<=139 and destinationPortTo >=139)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 389 or (port<=389 and portTo>=389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 389 or (destinationPort<=389 and destinationPortTo >=389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2049 or (port<=2049 and portTo>=2049))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2049 or (destinationPort<=2049 and destinationPortTo >=2049)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9042 or (port<=9042 and portTo>=9042))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9042 or (destinationPort<=9042 and destinationPortTo >=9042)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 61620 or (port<=61620 and portTo>=61620))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 61620 or (destinationPort<=61620 and destinationPortTo >=61620)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 8888 or (port<=8888 and portTo>=8888))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 8888 or (destinationPort<=8888 and destinationPortTo >=8888)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9160 or (port<=9160 and portTo>=9160))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9160 or (destinationPort<=9160 and destinationPortTo >=9160)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9200 or (port<=9200 and portTo>=9200))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9200 or (destinationPort<=9200 and destinationPortTo >=9200)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9300 or (port<=9300 and portTo>=9300))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9300 or (destinationPort<=9300 and destinationPortTo >=9300)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 1521 or (port<=1521 and portTo>=1521))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 1521 or (destinationPort<=1521 and destinationPortTo >=1521)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2483 or (port<=2483 and portTo>=2483))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2483 or (destinationPort<=2483 and destinationPortTo >=2483)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 6379 or (port<=6379 and portTo>=6379))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 6379 or (destinationPort<=6379 and destinationPortTo >=6379)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 3389 or (port<=3389 and portTo>=3389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 3389 or (destinationPort<=3389 and destinationPortTo >=3389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 11211 or (port<=11211 and portTo>=11211))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 11211 or (destinationPort<=11211 and destinationPortTo >=11211)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 27017 or (port<=27017 and portTo>=27017))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 27017 or (destinationPort<=27017 and destinationPortTo >=27017)]]]) ) ) and isRunning=true",
    "remediation": "It is recommended to remove the rules that allow permissive SSH/Remote/Admin access. If public interface exists, remove it and limit the access scope within the VPC only to applications or instances that requires access.\n Amazon Reference: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html",
    "complianceTag": "TM.AWS.NET.12|Network Security",
    "logicHash": "rDJO2mdvkyO1u8ukcgbvmw",
    "ruleId": "TM.AWS.NET.12",
    "category": ""
  },
  {
    "name": "Internally exposed running instance",
    "description": "Services and databases store data that may be sensitive, protected by law, subject to regulatory requirements or compliance standards. It is highly recommended that access to data will be restricted. This rule detects network settings that may expose data over the public internet or to a too wide local scope.",
    "severity": "High",
    "logic": "Instance where isPublic=false or not(nics contain [ subnet.routeTable.associations length()>0 ]) or not(nics contain [ subnet.routeTable.routes contain [ destinationCidrBlock='0.0.0.0/0' and gatewayId regexMatch /gw/ ]]) should not have ( ( inboundRules with [scope = '0.0.0.0/0' and ( port = 20 or (port<=20 and portTo>=20))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 20 or (destinationPort<=20 and destinationPortTo >=20)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 21 or (port<=21 and portTo>=21))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 21 or (destinationPort<=21 and destinationPortTo >=21)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 22 or (port<=22 and portTo>=22))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 22 or (destinationPort<=22 and destinationPortTo >=22)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 23 or (port<=23 and portTo>=23))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 23 or (destinationPort<=23 and destinationPortTo >=23)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 115 or (port<=115 and portTo>=115))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 115 or (destinationPort<=115 and destinationPortTo >=115)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 137 or (port<=137 and portTo>=137))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 137 or (destinationPort<=137 and destinationPortTo >=137)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 138 or (port<=138 and portTo>=138))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 138 or (destinationPort<=138 and destinationPortTo >=138)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 139 or (port<=139 and portTo>=139))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 139 or (destinationPort<=139 and destinationPortTo >=139)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 389 or (port<=389 and portTo>=389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 389 or (destinationPort<=389 and destinationPortTo >=389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2049 or (port<=2049 and portTo>=2049))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2049 or (destinationPort<=2049 and destinationPortTo >=2049)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9042 or (port<=9042 and portTo>=9042))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9042 or (destinationPort<=9042 and destinationPortTo >=9042)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 61620 or (port<=61620 and portTo>=61620))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 61620 or (destinationPort<=61620 and destinationPortTo >=61620)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 8888 or (port<=8888 and portTo>=8888))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 8888 or (destinationPort<=8888 and destinationPortTo >=8888)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9160 or (port<=9160 and portTo>=9160))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9160 or (destinationPort<=9160 and destinationPortTo >=9160)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9200 or (port<=9200 and portTo>=9200))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9200 or (destinationPort<=9200 and destinationPortTo >=9200)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9300 or (port<=9300 and portTo>=9300))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9300 or (destinationPort<=9300 and destinationPortTo >=9300)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 1521 or (port<=1521 and portTo>=1521))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 1521 or (destinationPort<=1521 and destinationPortTo >=1521)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2483 or (port<=2483 and portTo>=2483))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2483 or (destinationPort<=2483 and destinationPortTo >=2483)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 6379 or (port<=6379 and portTo>=6379))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 6379 or (destinationPort<=6379 and destinationPortTo >=6379)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 3389 or (port<=3389 and portTo>=3389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 3389 or (destinationPort<=3389 and destinationPortTo >=3389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 11211 or (port<=11211 and portTo>=11211))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 11211 or (destinationPort<=11211 and destinationPortTo >=11211)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 27017 or (port<=27017 and portTo>=27017))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 27017 or (destinationPort<=27017 and destinationPortTo >=27017)]]]) ) ) and isRunning=true",
    "remediation": "It is recommended to remove the rules that allow permissive SSH/Remote/Admin access. If public interface exists, remove it and limit the access scope within the VPC only to applications or instances that requires access.\n Amazon Reference: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html",
    "complianceTag": "TM.AWS.NET.05|Network Security",
    "logicHash": "+Q/GioHjFEmv/1vVzxwgUg",
    "ruleId": "TM.AWS.NET.05",
    "category": ""
  },
  {
    "name": "NLB potentially exposed to the public internet",
    "description": "Services and databases store data that may be sensitive, protected by law, subject to regulatory requirements or compliance standards. It is highly recommended that access to data will be restricted. This rule detects network settings that may expose data over the public internet",
    "severity": "High",
    "logic": "NetworkLoadBalancer where isPublic=true and nics contain [ subnet.routeTable.associations length()>0 ] and nics contain [ subnet.routeTable.routes contain [ destinationCidrBlock='0.0.0.0/0' and gatewayId regexMatch /gw/ ] ] should not have ( ( inboundRules with [scope = '0.0.0.0/0' and ( port = 20 or (port<=20 and portTo>=20))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 20 or (destinationPort<=20 and destinationPortTo >=20)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 21 or (port<=21 and portTo>=21))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 21 or (destinationPort<=21 and destinationPortTo >=21)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 22 or (port<=22 and portTo>=22))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 22 or (destinationPort<=22 and destinationPortTo >=22)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 23 or (port<=23 and portTo>=23))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 23 or (destinationPort<=23 and destinationPortTo >=23)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 115 or (port<=115 and portTo>=115))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 115 or (destinationPort<=115 and destinationPortTo >=115)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 137 or (port<=137 and portTo>=137))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 137 or (destinationPort<=137 and destinationPortTo >=137)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 138 or (port<=138 and portTo>=138))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 138 or (destinationPort<=138 and destinationPortTo >=138)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 139 or (port<=139 and portTo>=139))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 139 or (destinationPort<=139 and destinationPortTo >=139)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 389 or (port<=389 and portTo>=389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 389 or (destinationPort<=389 and destinationPortTo >=389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2049 or (port<=2049 and portTo>=2049))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2049 or (destinationPort<=2049 and destinationPortTo >=2049)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9042 or (port<=9042 and portTo>=9042))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9042 or (destinationPort<=9042 and destinationPortTo >=9042)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 61620 or (port<=61620 and portTo>=61620))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 61620 or (destinationPort<=61620 and destinationPortTo >=61620)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 8888 or (port<=8888 and portTo>=8888))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 8888 or (destinationPort<=8888 and destinationPortTo >=8888)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9160 or (port<=9160 and portTo>=9160))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9160 or (destinationPort<=9160 and destinationPortTo >=9160)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9200 or (port<=9200 and portTo>=9200))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9200 or (destinationPort<=9200 and destinationPortTo >=9200)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 9300 or (port<=9300 and portTo>=9300))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 9300 or (destinationPort<=9300 and destinationPortTo >=9300)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 1521 or (port<=1521 and portTo>=1521))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 1521 or (destinationPort<=1521 and destinationPortTo >=1521)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 2483 or (port<=2483 and portTo>=2483))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 2483 or (destinationPort<=2483 and destinationPortTo >=2483)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 6379 or (port<=6379 and portTo>=6379))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 6379 or (destinationPort<=6379 and destinationPortTo >=6379)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7000 or (port<=7000 and portTo>=7000))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7000 or (destinationPort<=7000 and destinationPortTo >=7000)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 7199 or (port<=7199 and portTo>=7199))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 7199 or (destinationPort<=7199 and destinationPortTo >=7199)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 3389 or (port<=3389 and portTo>=3389))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 3389 or (destinationPort<=3389 and destinationPortTo >=3389)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 11211 or (port<=11211 and portTo>=11211))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 11211 or (destinationPort<=11211 and destinationPortTo >=11211)]]]) ) or ( inboundRules with [scope = '0.0.0.0/0' and ( port = 27017 or (port<=27017 and portTo>=27017))] and nics contain [subnet.nacl contain [inbound with [action = 'ALLOW' and source = '0.0.0.0/0' and destinationPort = 27017 or (destinationPort<=27017 and destinationPortTo >=27017)]]]) ) ) and isRunning=true",
    "remediation": "It is recommended to remove network rules that allow permissive SSH/Remote/Admin access.\n If public interface exists, remove it and limit the access scope within the VPC only to applications or instances that requires access.\n Amazon Reference: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html",
    "complianceTag": "TM.AWS.NET.02|Network Security",
    "logicHash": "0UhNZN2JN4eZ1HBr8LQrWw",
    "ruleId": "TM.AWS.NET.02",
    "category": ""
  },
  {
    "name": "Over-permissive S3 Bucket CRUD Permissions",
    "description": "Misconfigured S3 buckets can leak private information to the entire internet or allow unauthorized data tampering / deletion. S3 bucket policy should ensure that principal of least privilege is being followed. A condition statement can be used to control the scope of the policy.",
    "severity": "High",
    "logic": "S3Bucket should not have policy.Statement with [Effect='Allow' and (Principal='*' or Principal.AWS='*') and Condition isEmpty() and ((Action contain [$ = '*'] or Action = '*' ) or (Action contain [$ regexMatch /^s3:List/] or Action regexMatch /^s3:List/) or (Action contain [$ regexMatch /^s3:Get/] or Action regexMatch /^s3:Get/) or ( (Action contain [$ regexMatch /^s3:Put/] or Action regexMatch /^s3:Put/) or (Action contain [$ regexMatch /^s3:Delete/] or Action regexMatch /^s3:Delete/) or (Action contain [$ = 's3:RestoreObject'] or Action = 's3:RestoreObject') ))]",
    "remediation": "1. Sign in to the AWS Management Console and open the Amazon S3 console at https://console.aws.amazon.com/s3/.\n 2. In the Buckets list, choose the name of the bucket that you want to create a bucket policy for or whose bucket policy you want to edit.\n 3. Choose Permissions.\n 4. Under Bucket policy, choose Edit. This opens the Edit bucket policy page.\n 5. On the Edit bucket policy page, explore Policy examples in the Amazon S3 User Guide, choose Policy generator to generate a policy automatically, or edit the JSON in the Policy section. Here verify policies for s3:Get* actions for principals '*'. If necessary, modify the policy instead, to limit the access to specific principals.\n 6. In the Policy box, edit the existing policy or paste the bucket policy from the Policy generator. Make sure to resolve security warnings, errors, general warnings, and suggestions before you save your policy.\n 7. Choose Save changes, which returns you to the Bucket Permissions page.",
    "complianceTag": "TM.AWS.IAM.02|Identity and Access Management",
    "logicHash": "y1TvNDRxSyU5RyZvYWnTEw",
    "ruleId": "TM.AWS.IAM.02",
    "category": ""
  },
  {
    "name": "S3 bucket potentially exposed",
    "description": "Misconfigured S3 buckets can leak private information to the entire internet or allow unauthorized data tampering / deletion. S3 bucket policy should ensure that principal of least privilege is being followed. A condition statement can be used to control the scope of the policy.",
    "severity": "High",
    "logic": "S3Bucket should not have ((accessPublicBlock isEmpty() = true and accountAccessPublicBlock isEmpty() and (policy.Statement with [Effect='Allow' and (Principal='*' or Principal.AWS='*') and Condition ])) or (accessPublicBlock.restrictPublicBuckets = false and policy.Statement with [Effect='Allow' and (Principal='*' or Principal.AWS='*') and Condition ]))",
    "remediation": "1.Sign in to the AWS Management Console and open the Amazon S3 console at https://console.aws.amazon.com/s3/.\n 2. In the Buckets list, choose the name of the bucket that you want to create a bucket policy for or whose bucket policy you want to edit.\n 3. Choose Permissions.\n 4. Under Bucket policy, choose Edit. This opens the Edit bucket policy page.\n 5. On the Edit bucket policy page, explore Policy examples in the Amazon S3 User Guide, choose Policy generator to generate a policy automatically, or edit the JSON in the Policy section. Here add a policy statement with required principals and appropriate condition.\n 6. In the Policy box, edit the existing policy or paste the bucket policy from the Policy generator. Make sure to resolve security warnings, errors, general warnings, and suggestions before you save your policy.\n 7. Choose Save changes, which returns you to the Bucket Permissions page.",
    "complianceTag": "TM.AWS.IAM.01|Network Security",
    "logicHash": "0/vvygZ6qkXc4NR86/9TOA",
    "ruleId": "TM.AWS.IAM.01",
    "category": ""
  },
  {
    "name": "CloudTrail logs exposed",
    "description": "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that access control list (ACL) applied to the S3 bucket that holds CloudTrail logs prevents public access",
    "severity": "Medium",
    "logic": "S3Bucket where policy.Statement contain [Principal.Service='cloudtrail.amazonaws.com'] should not have ((accessPublicBlock isEmpty() = true and ( acl.grants contain [uri like 'http://acs.amazonaws.com/groups/global/%'] or policy.Statement with [Effect='Allow' and (Principal='*' or Principal.AWS='*') ])) or (accessPublicBlock.ignorePublicAcls = false and acl.grants contain [uri like 'http://acs.amazonaws.com/groups/global/%']) or (accessPublicBlock.restrictPublicBuckets = false and policy.Statement with [Effect='Allow' and (Principal='*' or Principal.AWS='*') ]))",
    "remediation": "1. Go to the Amazon CloudTrail console at https://console.aws.amazon.com/cloudtrail/home\n 2. In the API activity history pane on the left, click Trails\n 3. In the Trails pane, note the bucket names in the S3 bucket column\n 4. Go to Amazon S3 console at https://console.aws.amazon.com/s3/home\n 5. For each bucket noted in step 3, right-click on the bucket and click Properties\n 6. In the Properties pane, click the Permissions tab.\n 7. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.\n 8. Ensure no rows exists that have the Grantee set to Everyone or the Grantee set to Any Authenticated User.\n 9. If the Edit bucket policy button is present, click it to review the bucket policy.\n 10. Ensure the policy does not contain a Statement having an Effect set to Allow and a Principal set to *.",
    "complianceTag": "TM.AWS.CRY.05|Logging and Monitoring",
    "logicHash": "oQPKf/qB3Y2prVS56BZglA",
    "ruleId": "TM.AWS.CRY.05",
    "category": ""
  },
  {
    "name": "Ensure AWS NAT Gateways are being utilized instead of the default route for private Subnets",
    "description": "NAT Gateway is a scalable and resilient method for allowing outbound internet traffic from your private VPC subnets.\nIt is recommended to use NAT gateways, and not the default route which permits all traffic, in Route Tables.",
    "severity": "Low",
    "logic": "RouteTable where routes contain [ state='active' ] should not have routes contain [ destinationCidrBlock='0.0.0.0/0' and natGatewayId isEmpty()  and not(gatewayId like '%igw%')]",
    "remediation": "To create a NAT gateway:\n 1. Sign into the AWS console\n 2. In the console, select the specific region\n 3. Navigate to VPC Dashboard\n 4. In the navigation pane, select 'NAT Gateways'\n 5. Click 'Create NAT Gateway', Specify the subnet in which to create the NAT gateway, and select the allocation ID of an Elastic IP address to associate with the NAT gateway. When you're done, click 'Create a NAT Gateway'. The NAT gateway displays in the console. After a few moments, its status changes to Available, after which it's ready for you to use.\n \n \nTo update Route Table:\nAfter you've created your NAT gateway, you must update your route tables for your private subnets to point internet traffic to the NAT gateway. We use the most specific route that matches the traffic to determine how to route the traffic.\n 1. Sign into the AWS console\n 2. In the console, select the region\n 3. Navigate to VPC Dashboard\n 4. In the navigation pane, select 'Route Tables'\n 5. Select the reported route table associated with your private subnet\n 6. Select 'Routes' and Click 'Edit routes'\n 7. Replace the current route that points to the NAT instance with a route to the NAT gateway\n 8. Click 'Save routes'.",
    "complianceTag": "TM.AWS.NET.46 |Network Security",
    "logicHash": "Lt4qQPvID/z7pkLstIQU/Q",
    "ruleId": "TM.AWS.NET.46",
    "category": ""
  },
  {
    "name": "Ensure IAM password policy requires minimum length of 12 or greater",
    "description": "Set the IAM password policy to ensure passwords consist of at least 12 characters. Password policies are, in part, used to enforce password complexity requirements. Setting a password complexity policy increases account resiliency against brute force login attempts.",
    "severity": "Low",
    "logic": "Iam should have passwordPolicy.minPasswordLength>=12",
    "remediation": "*From Portal:**\n1. Go to AWS Management Console: https://console.aws.amazon.com/iam/\n2. Navigate to IAM Services.\n3. Under Access management go to Account settings.\n4. Select 'Change password policy'.\n5. Set the Enforce minimum password length to be '12' characters.\n6. Click save changes.\n\n**From TF:**\nSet the 'minimum_password_length' to be equal to 12:\n```\nresource \"aws_iam_account_password_policy\" \"strict\" {\n...\nminimum_password_length = 12\n...\n}\n```\n**From Command Line:**\nrun:\n```aws iam update-account-password-policy --minimum-password-length 12```\nReferences:\n1. https://workbench.cisecurity.org/benchmarks/679\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/update-account-password-policy.html",
    "complianceTag": "Identity and Access Management|TM.AWS.IAM.12V1",
    "logicHash": "+/xJfqbbb8xyZfjVH1r+fQ",
    "ruleId": "",
    "category": ""
  }
]
