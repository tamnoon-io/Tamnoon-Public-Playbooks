# This is a readonly file, do not edit directly, to change update json files of module EC2Actions

security_group_get_all_flow_logs_readme_data= {'help': 'This automation gets flow logs of given security groups.', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find security group of ec2 instance. If not used, default region is us-east-1.', 'assetIds': "The Security Group's id identifier.", 'file': 'The path to a yml/json file that contain all the script input parameters.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed', 'actionParams': 'The ActionParams parameter provides the automation with parameters that are specific to the action taken. In this case get_all_flow_logs.  \n  In general, the value of the ActionParams parameter is one, single-quoted text string that specifies a json.  \n  ```\'{"param1key": "param1value", "param2key": "param2value"}\'```  \n  There are two optional action parameters associated with the action get_all_flow_logs:  \n  1. excludePrivateIPsFromSource (Optional)(boolean) - Flag to sign if need to find flow logs to &/or from only public IPs. Default is true.  \n  2. hoursback - (Optional)(number) - Number of past hours to search the logs from current time. Default is 720 hours (30 days)  \n  3. exclude_src_ports - comma-separated list of source ports that should be filtered out when fetching flowlogs (note that source ports smaller than 1024 are already filtered out)  \n  ```  \n  \'{ "excludePrivateIPsFromSource": "True", "hoursback": "720", "exclude_src_ports": "8443,8444"  }\'  \n```'}}

snapshot_ls_readme_data= {'help': 'This action lists the snapshots of Elastic Block Store (EBS) also known as EC2 snapshots', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find snapshot of ec2 instance. If not used, default region is us-east-1.', 'file': 'The path to a yml/json file that contain all the script input parameters.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed'}}

ec2_get_imdsv1_usage_readme_data= {'help': 'This automation provides the investigative part of handling alerts about the use of IMDSv1 by querying the CloudWatch metric MetadataNoToken.', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find security group of ec2 instance. If not used, default region is us-east-1.', 'assetIds': "The EC2 Instance's id identifier.", 'actionParams': 'The ActionParams parameter provides the automation with parameters that are specific to the action taken. In this case get_imdsv1_usage.  \n  In general, the value of the ActionParams parameter is one, single-quoted text string that specifies a json.  \n  ```\'{"param1key": "param1value", "param2key": "param2value"}\'```  \n  There is one optional action parameters associated with the action get_imdsv1_usage:  \n  1. days - (Optional) - The past duration to find the IMDSv1 usage before current time. Default value 14 days. Example,  \n  ```  \n  --actionParams \'{"days": 90}\'  \n  ```\n', 'file': 'The path to a yml/json file that contain all the script input parameters.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed'}}

subnet_disable_public_ip_assignment_readme_data= {'help': 'This automation is used to turn off automatic public IP address assignments.', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find snapshot of ec2 instance. If not used, default region is us-east-1.', 'actionParams': '- For automation:  \n  1. excluded_subnets - (Optional)(string) - List of subnets to exclude (by name or ids), comma seperated string  \n\n- For rollback:\n  1. rollBack - (Optional) (boolean)- Boolean flag to sign if this is a rollback call (required the existing of state file)\n  2. lastExecutionResultPath - (Required) - The path for the last execution that we want to roll-back from.', 'assetIds': 'The Subnet id identifier.', 'file': 'The path to a yml/json file that contain all the script input parameters.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed'}}

vpc_create_flow_log_readme_data= {'help': 'This automation enables and creates VPC flow logs.', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accomponied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accomponied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accomponied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find snapshot of ec2 instance. If not used, default region is us-east-1.', 'assetIds': 'The VPC id identifier.', 'actionParams': '- For automation  \n  1. DeliverLogsPermissionArn - (Required)(string) - The ARN of the IAM role that allows Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.  \n  2. LogGroupName (Optional)(string) - The name of the target log group to contain the vpc flow logs.', 'file': 'The path to a yml/json file that contain all the script input parameters.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed'}}

snapshot_encrypt_readme_data= {'help': 'This action encrypts the snapshots of Elastic Block Store (EBS) also known as EC2 snapshots', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find snapshot of ec2 instance. If not used, default region is us-east-1.', 'assetIds': "The Snapshot's id identifier.", 'actionParams': '\n  1. kmsKeyId - (Optional) The Amazon Web Services Key Management Service [Amazon Web Services KMS](https://docs.aws.amazon.com/kms/) key. If you do not specify the kmsKeyId parameter, the default customer managed key is used to encrypt the snapshot copy. Customer managed keys are KMS keys in your AWS account that you create, own, and manage.', 'file': 'The path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed'}}

security_group_clean_unused_sg_readme_data= {'help': 'This automation removes inbound/outbound rules of unused security group.', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find security group of ec2 instance. If not used, default region is us-east-1.', 'assetIds': "The Security Group's id identifier.", 'actionParams': '- For automation:  \n  1. onlyDefaults (Optional)(boolean) - Flag to sign if need to work only over default security groups.  \n  2. actionType (Optional)(string) - Which action to run over the Security Group - Clean or Remove - Clean (default) will clean the Security Group rules and Remove will delete the Security Group.  \n  3. deletionTag (Optional)(boolean) - Flag is use the Tamnoon deletion tag for deletion decision.  \n\n- For rollback:  \n  1. statePath - (Optional)(string) - The path where to save the state file, json that contain the snapshot of existing configuration before changes.  \n  2. rollBack (Optional) (boolean)- Boolean flag to sign if this is a rollback call (required the existing of state file).', 'file': 'The path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed'}}

ec2_find_load_balancers_readme_data= {'help': 'This automation gets details of load balancer(s) associated with provided EC2 instance(s).', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find security group of ec2 instance. If not used, default region is us-east-1.', 'assetIds': "Comma separated list of EC2 Instance's IDs or all", 'file': 'The path to a yml/json file that contain all the script input parameters.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed'}}

ec2_enforce_imdsv2_readme_data= {'help': 'This automation is used to switch for using IMSDv2 instead of v1.', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find security group of ec2 instance. If not used, default region is us-east-1.', 'assetIds': "The EC2 Instance's id identifier.", 'actionParams': '- For automation:\n  1. HttpPutResponseHopLimit - (Optional) - The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained. The value is number >=1.\n\n- For Rollback:\n  1. rollBack - (Required) - Boolean flag to sign if this is a rollback call (required the existing of state file)\n  2. lastExecutionResultPath (Required) - The path for the last execution that we want to roll-back from.', 'file': 'The path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed'}}

security_group_remove_or_replace_rules_readme_data= {'help': 'This automation will remove or replace security rules that match criteria provided in actionParams.', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find security group of ec2 instance. If not used, default region is us-east-1.', 'assetIds': "The Security Group's id identifier.", 'file': 'The path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed', 'actionParams': 'The ActionParams parameter provides the automation with parameters that are specific to the action taken. In this case remove_or_replace_rules.  \n  In general, the value of the ActionParams parameter is one, single-quoted text string that specifies a json.  \n  ```\'{"param1key": "param1value", "param2key": "param2value"}\'```  \n\n  - to remove rules:  \n    - Ports (Required): space separated list of ports to match Port Ranges from the security rule.  \n    - oldCidrs (Required): list of IP CIDRs to match Source from the security rule.  \n    - allprivate (Optional): filters the private IP CIDRs  \n    - replace (Optional): true/false. to replace rules, it is required to be true. It\'s default value is false; therefore, when absent, remedy will asume remove rules operation.    \n    example,   ```--actionParams \'{"Ports": "10 11", "oldCidrs": "10.0.0.0/8 12.0.0.0/8", "allprivate": false, "replace": false}\'``` or  ```--actionParams \'{"Ports": "10 11", "oldCidrs": "10.0.0.0/8 12.0.0.0/8", "allprivate": false}\'```  \n    both actionParams suggest remove rules operation  \n\n  - to replace rules:  \n    same as above with two changes.  \n    - replace (Required): true/false. to replace rules, it is required to be true. It\'s default value is false; therefore, when absent, remedy will asume remove rules operation.    \n    example, ```--actionParams \'{"Ports": "10 11", "oldCidrs": "10.0.0.0/8 12.0.0.0/8", "allprivate": false, "replace": true, "newCidrs":"11.0.0.0/8"}\'```  \n    - newCidrs (Required): new IP CIDR for source.  \n    example, ```--actionParams \'{"Ports": "10 11", "oldCidrs": "10.0.0.0/8", "allprivate": false, "replace": false, "newCidrs":"11.0.0.0/8"}\'```    \n\n- for rollback  \n    - rollBack (Required): true/false. Boolean flag to sign if this is a rollback call (required the existing of state file)  \n    - statePath (Required): The path string to the state file that contains getting details of remedy output which can be then used to undo those changes.  \n  \n    when rollback, it is recommended that you provide **--regions all**, because the hierarchy of authentication profile. If by the hierarchy, your session does not have the region where the security group should be, **it will not be found** unless you provide --regions in rollback command. To keep it safe, you should use **--regions all**. '}}

security_group_get_usage_readme_data= {'help': 'This automation finds if security group is being used or not by finding its associations with network interfaces, lambda functions, VPC configs, etc.', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find security group of ec2 instance. If not used, default region is us-east-1.', 'assetIds': "The Security Group's id identifier.", 'file': 'The path to a yml/json file that contain all the script input parameters.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed', 'actionParams': 'The ActionParams parameter provides the automation with parameters that are specific to the action taken. In this case get_usage.  \n  In general, the value of the ActionParams parameter is one, single-quoted text string that specifies a json.  \n  ```\'{"param1key": "param1value", "param2key": "param2value"}\'```  \n  There is one optional action parameters associated with the action get_usage:  \n  1. onlyDefaults (Optional)(boolean) - Flag to sign if need to work only over default security groups   \n  ```  \n  \'{ "onlyDefaults": "True"  }\'  \n```'}}

snapshot_delete_readme_data= {'help': 'This action deletes the snapshots of Elastic Block Store (EBS) also known as EC2 snapshots', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find snapshot of ec2 instance. If not used, default region is us-east-1.', 'assetIds': "The Snapshot's id identifier.", 'file': 'The path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed'}}

security_group_delete_readme_data= {'help': 'This automation deletes the security group(s).', 'cli_args': {'profile': 'Use the aws profile for setting up session during automation.', 'awsAccessKey': 'Use the aws access key for setting up session during automation. This must be accompanied by --awsSecret.', 'awsSecret': 'Use the aws secret key for setting up session during automation. This must be accompanied by --awsAccessKey.', 'awsSessionToken': 'Use the short term session token for setting up session during automation. This must be accompanied by --awsSecret and --awsAccessKey', 'regions': 'List of Regions used to find security group of ec2 instance. If not used, default region is us-east-1.', 'assetIds': "The Security Group's id identifier.", 'file': 'The path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'The type of output of script execution. available options are json (default) and csv', 'outDir': 'The path to store output of script execution. default is current working directory', 'logLevel': "Used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'Description for test to be executed'}}

common_json_data= {'help': {'EC2Actions': {'snapshot': 'An EBS snapshot is a point-in-time, incremental backup of an Amazon Elastic Block Store (EBS) volume stored in Amazon S3, allowing restoration of the volume to its exact state at the time of the snapshot.', 'security-group': 'An AWS Security Group acts as a virtual firewall that controls inbound and outbound traffic to AWS resources within a Virtual Private Cloud (VPC) based on specified security rules.', 'vpc': 'An AWS Virtual Private Cloud (VPC) is a customizable network environment that allows users to launch AWS resources in a logically isolated, secure section of the AWS Cloud.', 'ec2': 'Amazon EC2 (Elastic Compute Cloud) is a web service that provides resizable compute capacity in the cloud, allowing users to run virtual servers to host applications and services.', 'subnet': "An AWS Subnet is a segment of a VPC's IP address range where you can place groups of isolated resources based on security and operational needs within a larger VPC network."}}, 'usage': {'EC2Actions': 'python3 -m Automations.EC2Actions'}}
