from argparse import ArgumentParser, RawTextHelpFormatterimport sysimport osimport jsonimport datetimefrom Azure.library.Utils import utils as utilstry:    from Azure.Automations.Storage.help_jsons_data import *except ModuleNotFoundError:    blob_container_enable_log_analytics_logs_for_azure_storage_blobs = dict()    blob_container_remove_public_access_storage_containers = dict()    storage_account_remove_public_network_access = dict()    common_json_data = dict()def do_blob_container_action_remove_public_access_storage_containers(credential,                                                                     subscriptions,                                                                     resource_groups,                                                                     storage_accounts,                                                                     regions,                                                                     asset_ids,                                                                     action_params,                                                                     dry_run, ):    from . import StorageAccountPublicAccess    if StorageAccountPublicAccess.validate_action_params(action_params):        is_roll_back = "rollBack" in action_params and action_params["rollBack"]        if is_roll_back:            is_roll_back = "rollBack" in action_params and action_params["rollBack"]        if is_roll_back:            return StorageAccountPublicAccess.rollback_public_access(                credential=credential,                dry_run=dry_run,                last_execution_result_path=action_params["lastExecutionResultPath"],            )        return StorageAccountPublicAccess.remove_public_access(            credential=credential,            action_params=action_params,            subscriptions=subscriptions,            resource_groups=resource_groups,            storage_accounts=storage_accounts,            blob_containers=asset_ids,            regions=regions,            is_dry_run=dry_run,        )def do_blob_container_action_enable_log_analytics_logs_for_azure_storage_blobs(credential,                                                                               subscriptions,                                                                               resource_groups,                                                                               storage_accounts,                                                                               regions,                                                                               asset_ids,                                                                               action_params,                                                                               dry_run, ):    result = dict()    from . import StorageAccountLogging    if StorageAccountLogging.validate_action_params(action_params):        is_roll_back = "rollBack" in action_params and action_params["rollBack"]        if is_roll_back:            return StorageAccountLogging.rollback_enable_storage_logging(                credential=credential,                dry_run=dry_run,                last_execution_result_path=action_params["lastExecutionResultPath"],            )        result = StorageAccountLogging.enable_storage_logging(            credential=credential,            dry_run=dry_run,            subscriptions=subscriptions,            resource_group_names=resource_groups,            storage_accounts=storage_accounts,            regions=regions,            action_params=action_params,        )        return result    return []def storage_account_action_remove_public_network_access(credential,                                                        subscriptions,                                                        resource_groups,                                                        storage_accounts,                                                        regions,                                                        asset_ids,                                                        action_params,                                                        dry_run, ):    result = dict()    from . import StorageAccountNetworkAccess    if StorageAccountNetworkAccess.validate_action_params(action_params):        is_roll_back = "rollBack" in action_params and action_params["rollBack"]        if is_roll_back:            return StorageAccountNetworkAccess.rollback_restrict_network_access(                credential=credential,                dry_run=dry_run,                last_execution_result_path=action_params["lastExecutionResultPath"],            )        return StorageAccountNetworkAccess.restrict_network_access(            credential=credential,            dry_run=dry_run,            subscription_ids=subscriptions,            resource_group_names=resource_groups,            storage_account_names=storage_accounts,            regions=regions,            action_params=action_params,        )    return []def common_args(parser, args_json_data):    parser.add_argument("--subscriptions", required=False, metavar="", type=str, default="all",                        help=args_json_data.get("subscriptions"))    parser.add_argument("--resourceGroups", required=False, metavar="", type=str, default="all",                        help=args_json_data.get("resourceGroups"))    parser.add_argument("--storageAccounts", required=False, metavar="", type=str, default="all",                        help=args_json_data.get("storageAccounts"))    parser.add_argument("--regions", required=False, metavar="", type=str, default="all",                        help=args_json_data.get("regions"))    parser.add_argument(        "--actionParams",        required=False,        help=args_json_data.get("actionParams"),        metavar="",        type=utils.TypeActionParams,        default=None,    )    parser.add_argument("--file", required=False, metavar="",                        type=str, default=None, help=args_json_data.get("file"))    parser.add_argument("--logLevel", required=False, metavar="",                        type=str, default="INFO", help=args_json_data.get("logLevel"))    parser.add_argument("--dryRun", required=False, action="store_true", default=False,                        help=args_json_data.get("dryRun"))    parser.add_argument("--outputType", required=False, metavar="", type=str, default="json",                        help=args_json_data.get("outputType"))    parser.add_argument("--outDir", required=False, metavar="", type=str, default="./",                        help=args_json_data.get("outDir"))    parser.add_argument("--testId", required=False, metavar="",                        type=str, help=args_json_data.get("testId"))if __name__ == "__main__":    parser_usage = common_json_data.get("usage", {}).get("Storage", "python3 -m Automations.Storage")    usage = parser_usage + " [-h]"    if len(sys.argv) == 2 and ("--help" in sys.argv or "-h" in sys.argv):        utils.print_help_valid_types(common_json_data.get("help", {}).get("Storage"),                                     usage)        sys.exit(1)    parser = ArgumentParser(usage=parser_usage)    type_subparsers = parser.add_subparsers(title="type", dest='type', metavar="")    # subparsers for blob-container actions    blob_container_parser = type_subparsers.add_parser(name='blob-container', formatter_class=RawTextHelpFormatter)    # Remove the default "Positional Arguments" section    blob_container_parser._positionals.title = None    # This dictionary links help content to corresponding actions for the type 'blob-container'.    # For example, for the action 'remove_public_access_storage_containers',    # the help content is fetched from 'blob_container_remove_public_access_storage_containers.get("help")'.    bc_help = {        "remove_public_access_storage_containers":            blob_container_remove_public_access_storage_containers.get("help"),        "enable_log_analytics_logs_for_azure_storage_blobs":            blob_container_enable_log_analytics_logs_for_azure_storage_blobs.get("help")    }    blob_container_actions = blob_container_parser.add_subparsers(metavar="",                                                                  dest='action',                                                                  description=utils.type_help(                                                                      bc_help))    bc_action_remove_public_access_storage_containers = blob_container_actions.add_parser(        name="remove_public_access_storage_containers")    bc_action_remove_public_access_storage_containers._optionals.title = 'arguments'    bc_action_enable_log_analytics_logs_for_azure_storage_blobs = blob_container_actions.add_parser(        name="enable_log_analytics_logs_for_azure_storage_blobs")    bc_action_enable_log_analytics_logs_for_azure_storage_blobs._optionals.title = 'arguments'    # subparsers for storage-account actions    storage_account_parser = type_subparsers.add_parser(name="storage-account", formatter_class=RawTextHelpFormatter,                                                        )    # Remove the default "Positional Arguments" section    storage_account_parser._positionals.title = None    # This dictionary links help content with corresponding actions for the type 'storage-account'.    # For example, for the action 'remove_public_network_access',    # the associated help content is fetched from 'storage_account_remove_public_network_access.get("help")'.    sa_help = {        "remove_public_network_access":            storage_account_remove_public_network_access.get("help")    }    storage_account_actions = storage_account_parser.add_subparsers(metavar="",                                                                    dest='action',                                                                    description=utils.type_help(                                                                        sa_help))    sa_action_remove_public_network_access = storage_account_actions.add_parser(        name="remove_public_network_access")    sa_action_remove_public_network_access._optionals.title = 'arguments'    asset_type = sys.argv[1]    action = sys.argv[2]    if asset_type == 'blob-container':        if action == 'remove_public_access_storage_containers':            common_args(bc_action_remove_public_access_storage_containers,                        blob_container_remove_public_access_storage_containers.get("cli_args", {}))            bc_action_remove_public_access_storage_containers.add_argument("--assetIds", required=False, metavar="",                                                                           type=str,                                                                           default="all",                                                                           help=                                                                           blob_container_remove_public_access_storage_containers.get("cli_args", {}).get("assetIds"))        elif action == 'enable_log_analytics_logs_for_azure_storage_blobs':            common_args(bc_action_enable_log_analytics_logs_for_azure_storage_blobs,                        blob_container_enable_log_analytics_logs_for_azure_storage_blobs.get("cli_args", {}))    else:        common_args(sa_action_remove_public_network_access,                    storage_account_remove_public_network_access.get("cli_args", {}))    args = parser.parse_args()    params = utils.build_params(args=args)    result = None    action = sys.argv[2]    if params.get("assetIds") is None:        asset_ids = ["all"]    elif args.file is None:        asset_ids = params.assetIds.split(",")    else:        asset_ids = params.get('assetIds', ['all'])    action_params = params.actionParams if args.file is None else params.get(        'actionParams', None)    auth_params = None    action_params = (        json.loads(action_params)        if action_params and type(action_params) != dict        else params.get('actionParams', None)    )    dry_run = params.get('dryRun', False)    asset_type = sys.argv[1]    output_type = params.outputType.upper()    output_dir = params.outDir if args.file is None else params.get(        'outDir', './')    subscriptions = params.get('subscriptions', ['all']) if args.file is not None else params.subscriptions.split(        ",")    resource_groups = params.get('resourceGroups',                                 ['all']) if args.file is not None else params.resourceGroups.split(        ",")    storage_accounts = params.get('storageAccounts',                                  ['all']) if args.file is not None else params.storageAccounts.split(",")    # todo - figure regional work    regions = params.get(        'regions', ['all']) if args.file is not None else params.regions.split(",")    utils.log_setup(params["logLevel"])    result = dict(        {            "executionDate": datetime.datetime.now().ctime(),            "executionType": asset_type,            "executionAction": action,            "executionResult": [],            "actionParams": dict(action_params),        }    )    credential = None    if auth_params != None:        credential = utils.setup_session("shared-key", auth_params)    else:        credential = utils.setup_session("default")    # The following dictionary maps functions to their corresponding types and actions.    # For instance, for the type 'blob-container' and action 'remove_public_access_storage_containers',    # the function 'do_blob_container_action_remove_public_access_storage_containers' is mapped.    functions_mapping = {        'blob-container': {            'remove_public_access_storage_containers':                do_blob_container_action_remove_public_access_storage_containers,            'enable_log_analytics_logs_for_azure_storage_blobs':                do_blob_container_action_enable_log_analytics_logs_for_azure_storage_blobs        },        'storage-account': {            'remove_public_network_access':                storage_account_action_remove_public_network_access        }    }    result["executionResult"] = functions_mapping[asset_type][action](credential=credential,                                                                      subscriptions=subscriptions,                                                                      resource_groups=resource_groups,                                                                      storage_accounts=storage_accounts,                                                                      regions=regions,                                                                      asset_ids=asset_ids,                                                                      action_params=action_params,                                                                      dry_run=dry_run)    result_type = "dryrun" if dry_run else "execution"    result["testId"] = params.testId    if not output_dir.endswith("/"):        output_dir = output_dir + "/"    result["stateFile"] = utils.export_data_filename_with_timestamp(        f"{output_dir}Tamnoon-Azure-Storage-{asset_type if asset_type != None else ''}-{action.replace('_', '-') if action != None else ''}-{result_type}-result.{output_type}",        output_type,    )    utils.export_data(        result["stateFile"],        result,        export_format=(output_type),    )    print()    print(f"find logs in {os.path.abspath(result['stateFile'])}")