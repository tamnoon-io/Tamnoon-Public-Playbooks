# This is a readonly file, do not edit directly, to change update json files of module DBServer

postgresql_server_restrict_firewall_rules= {'help': 'This action enhances security by restricting PostgreSQL Server firewall rules, controlling and preventing unauthorized access.', 'cli_args': {'subscription': 'Subscription ID. When given, the automation will find Postgre SQL Flexible Servers in the specified Subscription.', 'resourceGroups': "list of Resource Group names. When given, the automation will find Postgre SQL Flexible Servers in only specified Resource Groups. Otherwise default value is 'all', i.e., the automation will find Postgre SQL Flexible Servers in all Resource Groups available in the Subscription.", 'assetIds': 'comma separated list of Postgre SQL Flexible Servers.', 'regions': "regions of Postgre SQL Flexible Servers. When given, the automation will find Postgre SQL Flexible Servers that have location same as any of the given regions. Otherwise default value is 'all', i.e., the automation will find Postgre SQL Flexible Servers regardless of its location.", 'actionParams': '- for the automation\n    1. remove_rule_name - (Optional*) name of firewall rule to remove or replace. This will be used to find firewall rule that can be removed or replaced.\n    2. remove_rule_range - (Optional*) ip address range*** of firewall rule to remove or replace. It should be in the form of &lt;start_ip_address&gt;-&lt;end_ip_address&gt;. This will be used to find firewall rule that can be removed or replaced. Example, "0.0.0.0-255.255.255.255"\n    3. replace - (Optional) true if you want to replace rule, false if you want to remove only. If you do not provide this action param, then default will be false.\n    4. replacement_rule_name - (Optional**) new name you want to replace. If not provided, then default will be Tamnoon-replacement-&lt;datetime&gt;. if replacement_rule_ranges have multiple ranges, then after first replacement, every replacement will have &lt;replacement_rule_name&gt;-&lt;n&gt; or Tamnoon-replacement-&lt;n&gt;-&lt;datetime&gt; where &lt;n&gt; is number of replacement range. &lt;datetime&gt; will be in format yyyy-mm-dd-HH-MM-SS.\n    5. replacement_ranges - (Optional**) - list of ip address ranges***. Example\n        ["0.0.0.0-99.99.99.255","100.100.100.0-200.200.200.255"]\n\n    \\* at least one of remove_rule_name and remove_rule_range are required  \n    ** if replace is true, then replacement_ranges is required with optional replacement_rule_name  \n    *** Here start_ip_address and end_ip_address are IP Addresses only. Using CIDR will not work.\n\n    Examples,  \n    - to remove:  \n        ```\n        --actionParams = \'{"remove_rule_name":"rule-1"}\'\n        ```  \n        or  \n        ```\n        --actionParams = \'{"remove_rule_range":"0.0.0.0-255.255.255.255"}\'\n        ```  \n        or  \n        ```\n        --actionParams = \'{"remove_rule_name":"rule-1", "remove_rule_range":"0.0.0.0-255.255.255.255"}\'\n        ```\n    - to replace:\n        ```\n        --actionParams = \'{"remove_rule_name":"rule-1", "replace": true, "replacement_ranges": ["0.0.0.0-99.99.99.255","100.100.100.0-200.200.200.255"]}\'\n        ```  \n        or  \n        ```\n        --actionParams = \'{"remove_rule_name":"rule-1", "replace": true, "replacement_rule_name": "rule-2", "replacement_ranges": ["0.0.0.0-99.99.99.255","100.100.100.0-200.200.200.255"]}\'\n        ```  \n\n - for rollback \n    1. rollBack - (Required) - Boolean flag to sign if this is a rollback call (required the existing of state file)\n    2. lastExecutionResultPath (Required) - The path for the last execution that we want to roll-back from.', 'file': 'the path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'the type of output of script execution. available options are json (default) and csv', 'outDir': 'the path to store output of script execution. default is current working directory', 'logLevel': "used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'description for test to be executed'}}

mysql_server_enable_auditing= {'help': 'This action activates auditing of Connection Logs for MySQL Flexible Server, recording network connections for compliance and security monitoring.', 'cli_args': {'subscription': 'Subscription ID. Automation will find MySQL Flexible servers in only specified Subscription', 'resourceGroups': "list of Resource Group names. When given, automation will find MySQL Flexible servers in only specified Resource Groups. Otherwise default value is 'all', i.e., automation will find MySQL Flexible servers in all Resource Groups available in the Subscription.", 'assetIds': 'comma separated list of MySQL Flexible Servers.', 'regions': "regions of MySQL Flexible Servers. When given, automation will find MySQL Flexible servers that have location same as any of the given regions. Otherwise default value is 'all', i.e., automation will find MySQL Flexible servers regardless of its location.", 'actionParams': '- for automation  \n1. storage-account-name - (Required) - name of storage account sink where diagnostic logs should be archived  \n2. resource-group-name - (Optional) - name of resource group that has this storage account. If not specified, default will be same resource group that has corresponding MySQL Flexible Server.  \n3. subscription-id - (Optional) - subscription-id of storage account. If not specified, default will be same subscription that has corresponding MySQL Flexible Server.  \n  - for rollback  \n\t1. rollBack - (Required) - Boolean flag to sign if this is a rollback call (required the existing of state file)\n\t2. lastExecutionResultPath (Required) - The path for the last execution that we want to roll-back from.', 'file': 'the path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'the type of output of script exucution. available options are json (default) and csv', 'outDir': 'the path to store output of script exucution. default is current working directory', 'logLevel': "used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'description for test to be executed'}}

sql_server_enable_auditing= {'help': 'This action activates auditing for SQL Server, recording logins, queries, and modifications for compliance and security monitoring.', 'cli_args': {'subscription': 'Subscription ID. Automation will find SQL servers in only specified Subscription.', 'resourceGroups': "list of Resource Group names. When given, automation will find SQL servers in only specified Resource Groups. Otherwise default value is 'all', i.e., automation will find SQL servers in Resource Groups available in the Subscription.", 'assetIds': 'comma separated list of SQL Servers.', 'regions': "regions of SQL Servers. When given, automation will find SQL servers that have location same as any of the given regions. Otherwise default value is 'all', i.e., automation will find SQL servers regardless of its location.", 'actionParams': '- for automation  \n1. storage-account-name - (Required) - name of storage account sink where diagnostic logs should be archived  \n2. resource-group-name - (Optional) - name of resource group that has this storage account. If not specified, default will be same resource group that has corresponding SQL Server.  \n3. subscription-id - (Optional) - subscription-id of storage account. If not specified, default will be same subscription that has corresponding SQL Server.  \n4. storage-auth-method - (Optional) - has two values. When ommitted from actionParams, default value used is "default".  \n         access_key - uses Access Key of storage account as means of authenticating for storing audit logs  \n         default - uses Entra ID of managed identity of SQL Server as means of authenticating for storing audit logs. For this method, few conditions should be met.\n            1. SQL Server needs to have a [Managed Identity](https://learn.microsoft.com/en-gb/entra/identity/managed-identities-azure-resources/overview). \n            2. Storage Account\'s IAM access control must have given a role "Storage Blob Data Contributor" or a role with similar permissions to the managed identity of SQL Server.  \n - for rollback \n      1. rollBack - (Required) - Boolean flag to sign if this is a rollback call (required the existing of state file)\n      2. lastExecutionResultPath (Required) - The path for the last execution that we want to roll-back from.', 'file': 'the path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'the type of output of script exucution. available options are json (default) and csv', 'outDir': 'the path to store output of script exucution. default is current working directory', 'logLevel': "used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'description for test to be executed'}}

postgresql_server_enable_auditing= {'help': 'This action activates auditing of Connection Logs for PostgreSQL Flexible Server for compliance and security monitoring.', 'cli_args': {'subscription': 'Subscription ID. Automation will find PostgreSQL Flexible servers in only specified Subscription', 'resourceGroups': "list of Resource Group names. When given, automation will find PostgreSQL Flexible servers in only specified Resource Groups. Otherwise default value is 'all', i.e., automation will find PostgreSQL Flexible servers in all Resource Groups available in the Subscription.", 'assetIds': 'comma separated list of PostgreSQL Flexible Servers.', 'regions': "regions of PostgreSQL Flexible Servers. When given, automation will find PostgreSQL Flexible servers that have location same as any of the given regions. Otherwise default value is 'all', i.e., automation will find PostgreSQL Flexible servers regardless of its location.", 'actionParams': '- for automation  \n1. storage-account-name - (Required) - name of storage account sink where diagnostic logs should be archived  \n2. resource-group-name - (Optional) - name of resource group that has this storage account. If not specified, default will be same resource group that has corresponding PostgreSQL Flexible Server.  \n3. subscription-id - (Optional) - subscription-id of storage account. If not specified, default will be same subscription that has corresponding PostgreSQL Flexible Server.  \n  - for rollback  \n\t1. rollBack - (Required) - Boolean flag to sign if this is a rollback call (required the existing of state file)\n\t2. lastExecutionResultPath (Required) - The path for the last execution that we want to roll-back from.', 'file': 'the path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'the type of output of script exucution. available options are json (default) and csv', 'outDir': 'the path to store output of script exucution. default is current working directory', 'logLevel': "used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'description for test to be executed'}}

sql_server_restrict_firewall_rules= {'help': 'This action enhances security by restricting SQL Server firewall rules, controlling and preventing unauthorized access.', 'cli_args': {'subscription': 'Subscription ID. When given, the automation will find SQL servers in the specified Subscription.', 'resourceGroups': "list of Resource Group names. When given, the automation will find SQL servers in only specified Resource Groups. Otherwise default value is 'all', i.e., the automation will find SQL servers in all Resource Groups available in the Subscription.", 'assetIds': 'comma separated list of SQL Servers.', 'regions': "regions of SQL Servers. When given, the automation will find SQL servers that have location same as any of the given regions. Otherwise default value is 'all', i.e., the automation will find SQL servers regardless of its location.", 'actionParams': '- for the automation\n  1. remove_rule_name - (Optional*) name of firewall rule to remove or replace. This will be used to find firewall rule that can be removed or replaced.\n   2. remove_rule_range - (Optional*) ip address range*** of firewall rule to remove or replace. It should be in the form of &lt;start_ip_address&gt;-&lt;end_ip_address&gt;. This will be used to find firewall rule that can be removed or replaced. Example, "0.0.0.0-255.255.255.255"\n  3. replace - (Optional) true if you want to replace rule, false if you want to remove only. If you do not provide this action param, then default will be false.\n  4. replacement_rule_name - (Optional**) new name you want to replace. If not provided, then default will be Tamnoon-replacement-&lt;datetime&gt;. if replacement_rule_ranges have multiple ranges, then after first replacement, every replacement will have &lt;replacement_rule_name&gt;-&lt;n&gt; or Tamnoon-replacement-&lt;n&gt;-&lt;datetime&gt; where &lt;n&gt; is number of replacement range. &lt;datetime&gt; will be in format yyyy-mm-dd-HH-MM-SS.\n  5. replacement_ranges - (Optional**) - list of ip address ranges***. Example\n         ["0.0.0.0-99.99.99.255","100.100.100.0-200.200.200.255"]\n\n      \\* at least one of remove_rule_name and remove_rule_range are required  \n      ** if replace is true, then replacement_ranges is required with optional replacement_rule_name  \n      *** Here start_ip_address and end_ip_address are IP Addresses only. Using CIDR will not work.\n\n      Examples,  \n    - to remove:  \n         ```\n         --actionParams = \'{"remove_rule_name":"rule-1"}\'\n         ```  \n         or  \n         ```\n         --actionParams = \'{"remove_rule_range":"0.0.0.0-255.255.255.255"}\'\n         ```  \n         or  \n         ```\n         --actionParams = \'{"remove_rule_name":"rule-1", "remove_rule_range":"0.0.0.0-255.255.255.255"}\'\n         ```\n    - to replace:\n         ```\n         --actionParams = \'{"remove_rule_name":"rule-1", "replace": true, "replacement_ranges": ["0.0.0.0-99.99.99.255","100.100.100.0-200.200.200.255"]}\'\n         ```  \n         or  \n         ```\n         --actionParams = \'{"remove_rule_name":"rule-1", "replace": true, "replacement_rule_name": "rule-2", "replacement_ranges": ["0.0.0.0-99.99.99.255","100.100.100.0-200.200.200.255"]}\'\n         ```  \n - for rollback \n      1. rollBack - (Required) - Boolean flag to sign if this is a rollback call (required the existing of state file)\n      2. lastExecutionResultPath (Required) - The path for the last execution that we want to roll-back from.', 'file': 'the path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'the type of output of script exucution. available options are json (default) and csv', 'outDir': 'the path to store output of script exucution. default is current working directory', 'logLevel': "used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'description for test to be executed'}}

mysql_server_restrict_firewall_rules= {'help': 'This action enhances security by restricting MYSQL Server firewall rules, controlling and preventing unauthorized access.', 'cli_args': {'subscription': 'Subscription ID. When given, the automation will find MySQL Flexible Servers in the specified Subscription.', 'resourceGroups': "list of Resource Group names. When given, the automation will find MySQL Flexible Servers in only specified Resource Groups. Otherwise default value is 'all', i.e., the automation will find MySQL Flexible Servers in all Resource Groups available in the Subscription.", 'assetIds': 'comma separated list of MySQL Flexible Servers.', 'regions': "regions of MySQL Flexible Servers. When given, the automation will find MySQL Flexible Servers that have location same as any of the given regions. Otherwise default value is 'all', i.e., the automation will find MySQL Flexible Servers regardless of its location.", 'actionParams': '- for the automation\n    1. remove_rule_name - (Optional*) name of firewall rule to remove or replace. This will be used to find firewall rule that can be removed or replaced.\n    2. remove_rule_range - (Optional*) ip address range*** of firewall rule to remove or replace. It should be in the form of &lt;start_ip_address&gt;-&lt;end_ip_address&gt;. This will be used to find firewall rule that can be removed or replaced. Example, "0.0.0.0-255.255.255.255"\n    3. replace - (Optional) true if you want to replace rule, false if you want to remove only. If you do not provide this action param, then default will be false.\n    4. replacement_rule_name - (Optional**) new name you want to replace. If not provided, then default will be Tamnoon-replacement-&lt;datetime&gt;. if replacement_rule_ranges have multiple ranges, then after first replacement, every replacement will have &lt;replacement_rule_name&gt;-&lt;n&gt; or &lt;replacement_rule_name&gt;-&lt;n&gt;-&lt;datetime&gt; where &lt;n&gt; is number of replacement range. &lt;datetime&gt; will be in format yyyy-mm-dd-HH-MM-SS.\n    5. replacement_ranges - (Optional**) - list of ip address ranges***. Example\n        ["0.0.0.0-99.99.99.255","100.100.100.0-200.200.200.255"]\n\n    \\* at least one of remove_rule_name and remove_rule_range are required  \n    ** if replace is true, then replacement_ranges is required with optional replacement_rule_name  \n    *** Here start_ip_address and end_ip_address are IP Addresses only. Using CIDR will not work.\n\n    Examples,  \n    - to remove:  \n        ```\n        --actionParams = \'{"remove_rule_name":"rule-1"}\'\n        ```  \n        or  \n        ```\n        --actionParams = \'{"remove_rule_range":"0.0.0.0-255.255.255.255"}\'\n        ```  \n        or  \n        ```\n        --actionParams = \'{"remove_rule_name":"rule-1", "remove_rule_range":"0.0.0.0-255.255.255.255"}\'\n        ```\n    - to replace:\n        ```\n        --actionParams = \'{"remove_rule_name":"rule-1", "replace": true, "replacement_ranges": ["0.0.0.0-99.99.99.255","100.100.100.0-200.200.200.255"]}\'\n        ```  \n        or  \n        ```\n        --actionParams = \'{"remove_rule_name":"rule-1", "replace": true, "replacement_rule_name": "rule-2", "replacement_ranges": ["0.0.0.0-99.99.99.255","100.100.100.0-200.200.200.255"]}\'\n        ```  \n\n- for rollback \n    1. rollBack - (Required) - Boolean flag to sign if this is a rollback call (required the existing of state file)\n    2. lastExecutionResultPath (Required) - The path for the last execution that we want to roll-back from.', 'file': 'the path to a yml/json file that contain all the script input parameters.', 'dryRun': 'Flag that mark if this is a dry run.', 'outputType': 'the type of output of script execution. available options are json (default) and csv', 'outDir': 'the path to store output of script execution. default is current working directory', 'logLevel': "used to categorize and prioritize log levels based on severity or importance. It's values can be INFO,DEBUG,WARNING,ERROR or CRITICAL", 'testId': 'description for test to be executed'}}

common_json_data= {'help': {'Storage': {'blob-container': 'Azure Blob Container is a scalable storage unit in Azure for organizing unstructured data like images or documents. It offers secure, efficient storage', 'storage-account': 'Azure Storage Account is your centralized solution for secure, scalable data storage in the cloud. Manage diverse data types efficiently, control access'}, 'Network': {'network-security-group': 'Azure Network Security Group acts as a virtual firewall for your Azure resources. It allows you to control inbound and outbound traffic to your resources, providing an additional layer of security for your applications.'}, 'DBServer': {'sql-server': 'Azure SQL Server a fully managed relational database service on Azure, offering scalability, security, and simplified management for structured data.', 'mysql-server': 'Azure MySQL Server open-source relational database managed service on Azure, providing scalability, high availability, and seamless integration with cloud services.', 'postgresql-server': 'Azure PostgreSQL Server is managed service on Azure for the open-source PostgreSQL database, offering scalability, advanced data handling, and reliable database management.'}}, 'usage': {'Storage': 'python3 -m Automations.Storage', 'Network': 'python3 -m Automations.Network', 'DBServer': 'python3 -m Automations.DBServer'}}
